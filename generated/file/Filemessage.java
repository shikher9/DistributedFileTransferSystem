// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filemessage.proto

package file;

public final class Filemessage {
  private Filemessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ChunkHeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ChunkHeader)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int64 userID = 1;</code>
     *
     * <pre>
     *userid shall be a combination of clusterid and nodeid.
     *Examples:
     *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
     *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
     * </pre>
     */
    boolean hasUserID();
    /**
     * <code>required int64 userID = 1;</code>
     *
     * <pre>
     *userid shall be a combination of clusterid and nodeid.
     *Examples:
     *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
     *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
     * </pre>
     */
    long getUserID();

    /**
     * <code>required string fileName = 2;</code>
     */
    boolean hasFileName();
    /**
     * <code>required string fileName = 2;</code>
     */
    java.lang.String getFileName();
    /**
     * <code>required string fileName = 2;</code>
     */
    com.google.protobuf.ByteString
        getFileNameBytes();

    /**
     * <code>required int64 chunkID = 3;</code>
     */
    boolean hasChunkID();
    /**
     * <code>required int64 chunkID = 3;</code>
     */
    long getChunkID();

    /**
     * <code>optional int64 fileSize = 4;</code>
     */
    boolean hasFileSize();
    /**
     * <code>optional int64 fileSize = 4;</code>
     */
    long getFileSize();

    /**
     * <code>optional int32 maxhops = 5;</code>
     *
     * <pre>
     *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
     * </pre>
     */
    boolean hasMaxhops();
    /**
     * <code>optional int32 maxhops = 5;</code>
     *
     * <pre>
     *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
     * </pre>
     */
    int getMaxhops();

    /**
     * <code>optional .Failure err = 6;</code>
     */
    boolean hasErr();
    /**
     * <code>optional .Failure err = 6;</code>
     */
    pipe.common.Common.Failure getErr();
    /**
     * <code>optional .Failure err = 6;</code>
     */
    pipe.common.Common.FailureOrBuilder getErrOrBuilder();
  }
  /**
   * Protobuf type {@code ChunkHeader}
   *
   * <pre>
   *chunk size decided to be 1024 bytes
   * </pre>
   */
  public static final class ChunkHeader extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:ChunkHeader)
      ChunkHeaderOrBuilder {
    // Use ChunkHeader.newBuilder() to construct.
    private ChunkHeader(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ChunkHeader(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ChunkHeader defaultInstance;
    public static ChunkHeader getDefaultInstance() {
      return defaultInstance;
    }

    public ChunkHeader getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ChunkHeader(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              userID_ = input.readInt64();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              fileName_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              chunkID_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              fileSize_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              maxhops_ = input.readInt32();
              break;
            }
            case 50: {
              pipe.common.Common.Failure.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = err_.toBuilder();
              }
              err_ = input.readMessage(pipe.common.Common.Failure.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(err_);
                err_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return file.Filemessage.internal_static_ChunkHeader_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return file.Filemessage.internal_static_ChunkHeader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              file.Filemessage.ChunkHeader.class, file.Filemessage.ChunkHeader.Builder.class);
    }

    public static com.google.protobuf.Parser<ChunkHeader> PARSER =
        new com.google.protobuf.AbstractParser<ChunkHeader>() {
      public ChunkHeader parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChunkHeader(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ChunkHeader> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int USERID_FIELD_NUMBER = 1;
    private long userID_;
    /**
     * <code>required int64 userID = 1;</code>
     *
     * <pre>
     *userid shall be a combination of clusterid and nodeid.
     *Examples:
     *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
     *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
     * </pre>
     */
    public boolean hasUserID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 userID = 1;</code>
     *
     * <pre>
     *userid shall be a combination of clusterid and nodeid.
     *Examples:
     *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
     *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
     * </pre>
     */
    public long getUserID() {
      return userID_;
    }

    public static final int FILENAME_FIELD_NUMBER = 2;
    private java.lang.Object fileName_;
    /**
     * <code>required string fileName = 2;</code>
     */
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string fileName = 2;</code>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string fileName = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHUNKID_FIELD_NUMBER = 3;
    private long chunkID_;
    /**
     * <code>required int64 chunkID = 3;</code>
     */
    public boolean hasChunkID() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 chunkID = 3;</code>
     */
    public long getChunkID() {
      return chunkID_;
    }

    public static final int FILESIZE_FIELD_NUMBER = 4;
    private long fileSize_;
    /**
     * <code>optional int64 fileSize = 4;</code>
     */
    public boolean hasFileSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 fileSize = 4;</code>
     */
    public long getFileSize() {
      return fileSize_;
    }

    public static final int MAXHOPS_FIELD_NUMBER = 5;
    private int maxhops_;
    /**
     * <code>optional int32 maxhops = 5;</code>
     *
     * <pre>
     *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
     * </pre>
     */
    public boolean hasMaxhops() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 maxhops = 5;</code>
     *
     * <pre>
     *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
     * </pre>
     */
    public int getMaxhops() {
      return maxhops_;
    }

    public static final int ERR_FIELD_NUMBER = 6;
    private pipe.common.Common.Failure err_;
    /**
     * <code>optional .Failure err = 6;</code>
     */
    public boolean hasErr() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .Failure err = 6;</code>
     */
    public pipe.common.Common.Failure getErr() {
      return err_;
    }
    /**
     * <code>optional .Failure err = 6;</code>
     */
    public pipe.common.Common.FailureOrBuilder getErrOrBuilder() {
      return err_;
    }

    private void initFields() {
      userID_ = 0L;
      fileName_ = "";
      chunkID_ = 0L;
      fileSize_ = 0L;
      maxhops_ = 0;
      err_ = pipe.common.Common.Failure.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasUserID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChunkID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasErr()) {
        if (!getErr().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, userID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getFileNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, chunkID_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, fileSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, maxhops_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, err_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, userID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFileNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, chunkID_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, fileSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, maxhops_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, err_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static file.Filemessage.ChunkHeader parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.ChunkHeader parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.ChunkHeader parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.ChunkHeader parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.ChunkHeader parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.ChunkHeader parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static file.Filemessage.ChunkHeader parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static file.Filemessage.ChunkHeader parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static file.Filemessage.ChunkHeader parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.ChunkHeader parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(file.Filemessage.ChunkHeader prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ChunkHeader}
     *
     * <pre>
     *chunk size decided to be 1024 bytes
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ChunkHeader)
        file.Filemessage.ChunkHeaderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return file.Filemessage.internal_static_ChunkHeader_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return file.Filemessage.internal_static_ChunkHeader_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                file.Filemessage.ChunkHeader.class, file.Filemessage.ChunkHeader.Builder.class);
      }

      // Construct using file.Filemessage.ChunkHeader.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getErrFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        userID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        fileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        chunkID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        fileSize_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxhops_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (errBuilder_ == null) {
          err_ = pipe.common.Common.Failure.getDefaultInstance();
        } else {
          errBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return file.Filemessage.internal_static_ChunkHeader_descriptor;
      }

      public file.Filemessage.ChunkHeader getDefaultInstanceForType() {
        return file.Filemessage.ChunkHeader.getDefaultInstance();
      }

      public file.Filemessage.ChunkHeader build() {
        file.Filemessage.ChunkHeader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public file.Filemessage.ChunkHeader buildPartial() {
        file.Filemessage.ChunkHeader result = new file.Filemessage.ChunkHeader(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.userID_ = userID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fileName_ = fileName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.chunkID_ = chunkID_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fileSize_ = fileSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxhops_ = maxhops_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (errBuilder_ == null) {
          result.err_ = err_;
        } else {
          result.err_ = errBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof file.Filemessage.ChunkHeader) {
          return mergeFrom((file.Filemessage.ChunkHeader)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(file.Filemessage.ChunkHeader other) {
        if (other == file.Filemessage.ChunkHeader.getDefaultInstance()) return this;
        if (other.hasUserID()) {
          setUserID(other.getUserID());
        }
        if (other.hasFileName()) {
          bitField0_ |= 0x00000002;
          fileName_ = other.fileName_;
          onChanged();
        }
        if (other.hasChunkID()) {
          setChunkID(other.getChunkID());
        }
        if (other.hasFileSize()) {
          setFileSize(other.getFileSize());
        }
        if (other.hasMaxhops()) {
          setMaxhops(other.getMaxhops());
        }
        if (other.hasErr()) {
          mergeErr(other.getErr());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUserID()) {
          
          return false;
        }
        if (!hasFileName()) {
          
          return false;
        }
        if (!hasChunkID()) {
          
          return false;
        }
        if (hasErr()) {
          if (!getErr().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        file.Filemessage.ChunkHeader parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (file.Filemessage.ChunkHeader) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long userID_ ;
      /**
       * <code>required int64 userID = 1;</code>
       *
       * <pre>
       *userid shall be a combination of clusterid and nodeid.
       *Examples:
       *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
       *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
       * </pre>
       */
      public boolean hasUserID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 userID = 1;</code>
       *
       * <pre>
       *userid shall be a combination of clusterid and nodeid.
       *Examples:
       *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
       *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
       * </pre>
       */
      public long getUserID() {
        return userID_;
      }
      /**
       * <code>required int64 userID = 1;</code>
       *
       * <pre>
       *userid shall be a combination of clusterid and nodeid.
       *Examples:
       *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
       *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
       * </pre>
       */
      public Builder setUserID(long value) {
        bitField0_ |= 0x00000001;
        userID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 userID = 1;</code>
       *
       * <pre>
       *userid shall be a combination of clusterid and nodeid.
       *Examples:
       *For cluster 1: clusterid+nodeid=11,12,13. clusterid=1,nodeid=1,2,3,...n
       *For cluster 2: clusterid+nodeid=21,22,23. clusterid=2,nodeid=1,2,3,...n
       * </pre>
       */
      public Builder clearUserID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        userID_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object fileName_ = "";
      /**
       * <code>required string fileName = 2;</code>
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        fileName_ = value;
        onChanged();
        return this;
      }

      private long chunkID_ ;
      /**
       * <code>required int64 chunkID = 3;</code>
       */
      public boolean hasChunkID() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int64 chunkID = 3;</code>
       */
      public long getChunkID() {
        return chunkID_;
      }
      /**
       * <code>required int64 chunkID = 3;</code>
       */
      public Builder setChunkID(long value) {
        bitField0_ |= 0x00000004;
        chunkID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 chunkID = 3;</code>
       */
      public Builder clearChunkID() {
        bitField0_ = (bitField0_ & ~0x00000004);
        chunkID_ = 0L;
        onChanged();
        return this;
      }

      private long fileSize_ ;
      /**
       * <code>optional int64 fileSize = 4;</code>
       */
      public boolean hasFileSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 fileSize = 4;</code>
       */
      public long getFileSize() {
        return fileSize_;
      }
      /**
       * <code>optional int64 fileSize = 4;</code>
       */
      public Builder setFileSize(long value) {
        bitField0_ |= 0x00000008;
        fileSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 fileSize = 4;</code>
       */
      public Builder clearFileSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fileSize_ = 0L;
        onChanged();
        return this;
      }

      private int maxhops_ ;
      /**
       * <code>optional int32 maxhops = 5;</code>
       *
       * <pre>
       *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
       * </pre>
       */
      public boolean hasMaxhops() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 maxhops = 5;</code>
       *
       * <pre>
       *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
       * </pre>
       */
      public int getMaxhops() {
        return maxhops_;
      }
      /**
       * <code>optional int32 maxhops = 5;</code>
       *
       * <pre>
       *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
       * </pre>
       */
      public Builder setMaxhops(int value) {
        bitField0_ |= 0x00000010;
        maxhops_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 maxhops = 5;</code>
       *
       * <pre>
       *If maxhops is not -1, forward the incoming other cluster's request to some other cluster if your cluster is also busy.
       * </pre>
       */
      public Builder clearMaxhops() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxhops_ = 0;
        onChanged();
        return this;
      }

      private pipe.common.Common.Failure err_ = pipe.common.Common.Failure.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          pipe.common.Common.Failure, pipe.common.Common.Failure.Builder, pipe.common.Common.FailureOrBuilder> errBuilder_;
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public boolean hasErr() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public pipe.common.Common.Failure getErr() {
        if (errBuilder_ == null) {
          return err_;
        } else {
          return errBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public Builder setErr(pipe.common.Common.Failure value) {
        if (errBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          err_ = value;
          onChanged();
        } else {
          errBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public Builder setErr(
          pipe.common.Common.Failure.Builder builderForValue) {
        if (errBuilder_ == null) {
          err_ = builderForValue.build();
          onChanged();
        } else {
          errBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public Builder mergeErr(pipe.common.Common.Failure value) {
        if (errBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              err_ != pipe.common.Common.Failure.getDefaultInstance()) {
            err_ =
              pipe.common.Common.Failure.newBuilder(err_).mergeFrom(value).buildPartial();
          } else {
            err_ = value;
          }
          onChanged();
        } else {
          errBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public Builder clearErr() {
        if (errBuilder_ == null) {
          err_ = pipe.common.Common.Failure.getDefaultInstance();
          onChanged();
        } else {
          errBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public pipe.common.Common.Failure.Builder getErrBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getErrFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      public pipe.common.Common.FailureOrBuilder getErrOrBuilder() {
        if (errBuilder_ != null) {
          return errBuilder_.getMessageOrBuilder();
        } else {
          return err_;
        }
      }
      /**
       * <code>optional .Failure err = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          pipe.common.Common.Failure, pipe.common.Common.Failure.Builder, pipe.common.Common.FailureOrBuilder> 
          getErrFieldBuilder() {
        if (errBuilder_ == null) {
          errBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              pipe.common.Common.Failure, pipe.common.Common.Failure.Builder, pipe.common.Common.FailureOrBuilder>(
                  getErr(),
                  getParentForChildren(),
                  isClean());
          err_ = null;
        }
        return errBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ChunkHeader)
    }

    static {
      defaultInstance = new ChunkHeader(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ChunkHeader)
  }

  public interface ChunkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Chunk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    boolean hasChunkHeader();
    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    file.Filemessage.ChunkHeader getChunkHeader();
    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    file.Filemessage.ChunkHeaderOrBuilder getChunkHeaderOrBuilder();

    /**
     * <code>optional bytes chunkData = 2;</code>
     *
     * <pre>
     * data of chunk
     * </pre>
     */
    boolean hasChunkData();
    /**
     * <code>optional bytes chunkData = 2;</code>
     *
     * <pre>
     * data of chunk
     * </pre>
     */
    com.google.protobuf.ByteString getChunkData();
  }
  /**
   * Protobuf type {@code Chunk}
   *
   * <pre>
   *For upload/save file
   * </pre>
   */
  public static final class Chunk extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Chunk)
      ChunkOrBuilder {
    // Use Chunk.newBuilder() to construct.
    private Chunk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Chunk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Chunk defaultInstance;
    public static Chunk getDefaultInstance() {
      return defaultInstance;
    }

    public Chunk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Chunk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              file.Filemessage.ChunkHeader.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = chunkHeader_.toBuilder();
              }
              chunkHeader_ = input.readMessage(file.Filemessage.ChunkHeader.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(chunkHeader_);
                chunkHeader_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              chunkData_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return file.Filemessage.internal_static_Chunk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return file.Filemessage.internal_static_Chunk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              file.Filemessage.Chunk.class, file.Filemessage.Chunk.Builder.class);
    }

    public static com.google.protobuf.Parser<Chunk> PARSER =
        new com.google.protobuf.AbstractParser<Chunk>() {
      public Chunk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Chunk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Chunk> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHUNKHEADER_FIELD_NUMBER = 1;
    private file.Filemessage.ChunkHeader chunkHeader_;
    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    public boolean hasChunkHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    public file.Filemessage.ChunkHeader getChunkHeader() {
      return chunkHeader_;
    }
    /**
     * <code>required .ChunkHeader chunkHeader = 1;</code>
     */
    public file.Filemessage.ChunkHeaderOrBuilder getChunkHeaderOrBuilder() {
      return chunkHeader_;
    }

    public static final int CHUNKDATA_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString chunkData_;
    /**
     * <code>optional bytes chunkData = 2;</code>
     *
     * <pre>
     * data of chunk
     * </pre>
     */
    public boolean hasChunkData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes chunkData = 2;</code>
     *
     * <pre>
     * data of chunk
     * </pre>
     */
    public com.google.protobuf.ByteString getChunkData() {
      return chunkData_;
    }

    private void initFields() {
      chunkHeader_ = file.Filemessage.ChunkHeader.getDefaultInstance();
      chunkData_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChunkHeader()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getChunkHeader().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, chunkHeader_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, chunkData_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, chunkHeader_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, chunkData_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static file.Filemessage.Chunk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.Chunk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.Chunk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.Chunk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.Chunk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.Chunk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static file.Filemessage.Chunk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static file.Filemessage.Chunk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static file.Filemessage.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.Chunk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(file.Filemessage.Chunk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Chunk}
     *
     * <pre>
     *For upload/save file
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Chunk)
        file.Filemessage.ChunkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return file.Filemessage.internal_static_Chunk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return file.Filemessage.internal_static_Chunk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                file.Filemessage.Chunk.class, file.Filemessage.Chunk.Builder.class);
      }

      // Construct using file.Filemessage.Chunk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getChunkHeaderFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (chunkHeaderBuilder_ == null) {
          chunkHeader_ = file.Filemessage.ChunkHeader.getDefaultInstance();
        } else {
          chunkHeaderBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        chunkData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return file.Filemessage.internal_static_Chunk_descriptor;
      }

      public file.Filemessage.Chunk getDefaultInstanceForType() {
        return file.Filemessage.Chunk.getDefaultInstance();
      }

      public file.Filemessage.Chunk build() {
        file.Filemessage.Chunk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public file.Filemessage.Chunk buildPartial() {
        file.Filemessage.Chunk result = new file.Filemessage.Chunk(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (chunkHeaderBuilder_ == null) {
          result.chunkHeader_ = chunkHeader_;
        } else {
          result.chunkHeader_ = chunkHeaderBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chunkData_ = chunkData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof file.Filemessage.Chunk) {
          return mergeFrom((file.Filemessage.Chunk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(file.Filemessage.Chunk other) {
        if (other == file.Filemessage.Chunk.getDefaultInstance()) return this;
        if (other.hasChunkHeader()) {
          mergeChunkHeader(other.getChunkHeader());
        }
        if (other.hasChunkData()) {
          setChunkData(other.getChunkData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChunkHeader()) {
          
          return false;
        }
        if (!getChunkHeader().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        file.Filemessage.Chunk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (file.Filemessage.Chunk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private file.Filemessage.ChunkHeader chunkHeader_ = file.Filemessage.ChunkHeader.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          file.Filemessage.ChunkHeader, file.Filemessage.ChunkHeader.Builder, file.Filemessage.ChunkHeaderOrBuilder> chunkHeaderBuilder_;
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public boolean hasChunkHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public file.Filemessage.ChunkHeader getChunkHeader() {
        if (chunkHeaderBuilder_ == null) {
          return chunkHeader_;
        } else {
          return chunkHeaderBuilder_.getMessage();
        }
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public Builder setChunkHeader(file.Filemessage.ChunkHeader value) {
        if (chunkHeaderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          chunkHeader_ = value;
          onChanged();
        } else {
          chunkHeaderBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public Builder setChunkHeader(
          file.Filemessage.ChunkHeader.Builder builderForValue) {
        if (chunkHeaderBuilder_ == null) {
          chunkHeader_ = builderForValue.build();
          onChanged();
        } else {
          chunkHeaderBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public Builder mergeChunkHeader(file.Filemessage.ChunkHeader value) {
        if (chunkHeaderBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              chunkHeader_ != file.Filemessage.ChunkHeader.getDefaultInstance()) {
            chunkHeader_ =
              file.Filemessage.ChunkHeader.newBuilder(chunkHeader_).mergeFrom(value).buildPartial();
          } else {
            chunkHeader_ = value;
          }
          onChanged();
        } else {
          chunkHeaderBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public Builder clearChunkHeader() {
        if (chunkHeaderBuilder_ == null) {
          chunkHeader_ = file.Filemessage.ChunkHeader.getDefaultInstance();
          onChanged();
        } else {
          chunkHeaderBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public file.Filemessage.ChunkHeader.Builder getChunkHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getChunkHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      public file.Filemessage.ChunkHeaderOrBuilder getChunkHeaderOrBuilder() {
        if (chunkHeaderBuilder_ != null) {
          return chunkHeaderBuilder_.getMessageOrBuilder();
        } else {
          return chunkHeader_;
        }
      }
      /**
       * <code>required .ChunkHeader chunkHeader = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          file.Filemessage.ChunkHeader, file.Filemessage.ChunkHeader.Builder, file.Filemessage.ChunkHeaderOrBuilder> 
          getChunkHeaderFieldBuilder() {
        if (chunkHeaderBuilder_ == null) {
          chunkHeaderBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              file.Filemessage.ChunkHeader, file.Filemessage.ChunkHeader.Builder, file.Filemessage.ChunkHeaderOrBuilder>(
                  getChunkHeader(),
                  getParentForChildren(),
                  isClean());
          chunkHeader_ = null;
        }
        return chunkHeaderBuilder_;
      }

      private com.google.protobuf.ByteString chunkData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes chunkData = 2;</code>
       *
       * <pre>
       * data of chunk
       * </pre>
       */
      public boolean hasChunkData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes chunkData = 2;</code>
       *
       * <pre>
       * data of chunk
       * </pre>
       */
      public com.google.protobuf.ByteString getChunkData() {
        return chunkData_;
      }
      /**
       * <code>optional bytes chunkData = 2;</code>
       *
       * <pre>
       * data of chunk
       * </pre>
       */
      public Builder setChunkData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        chunkData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes chunkData = 2;</code>
       *
       * <pre>
       * data of chunk
       * </pre>
       */
      public Builder clearChunkData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chunkData_ = getDefaultInstance().getChunkData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Chunk)
    }

    static {
      defaultInstance = new Chunk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Chunk)
  }

  public interface FileRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FileRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int64 userID = 1;</code>
     */
    boolean hasUserID();
    /**
     * <code>required int64 userID = 1;</code>
     */
    long getUserID();

    /**
     * <code>required string fileName = 2;</code>
     */
    boolean hasFileName();
    /**
     * <code>required string fileName = 2;</code>
     */
    java.lang.String getFileName();
    /**
     * <code>required string fileName = 2;</code>
     */
    com.google.protobuf.ByteString
        getFileNameBytes();
  }
  /**
   * Protobuf type {@code FileRequest}
   *
   * <pre>
   *For file download/retrieve request
   * </pre>
   */
  public static final class FileRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:FileRequest)
      FileRequestOrBuilder {
    // Use FileRequest.newBuilder() to construct.
    private FileRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileRequest defaultInstance;
    public static FileRequest getDefaultInstance() {
      return defaultInstance;
    }

    public FileRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              userID_ = input.readInt64();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              fileName_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return file.Filemessage.internal_static_FileRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return file.Filemessage.internal_static_FileRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              file.Filemessage.FileRequest.class, file.Filemessage.FileRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<FileRequest> PARSER =
        new com.google.protobuf.AbstractParser<FileRequest>() {
      public FileRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int USERID_FIELD_NUMBER = 1;
    private long userID_;
    /**
     * <code>required int64 userID = 1;</code>
     */
    public boolean hasUserID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 userID = 1;</code>
     */
    public long getUserID() {
      return userID_;
    }

    public static final int FILENAME_FIELD_NUMBER = 2;
    private java.lang.Object fileName_;
    /**
     * <code>required string fileName = 2;</code>
     */
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string fileName = 2;</code>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string fileName = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      userID_ = 0L;
      fileName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasUserID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFileName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, userID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getFileNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, userID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFileNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static file.Filemessage.FileRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.FileRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.FileRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static file.Filemessage.FileRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static file.Filemessage.FileRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.FileRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static file.Filemessage.FileRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static file.Filemessage.FileRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static file.Filemessage.FileRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static file.Filemessage.FileRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(file.Filemessage.FileRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FileRequest}
     *
     * <pre>
     *For file download/retrieve request
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:FileRequest)
        file.Filemessage.FileRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return file.Filemessage.internal_static_FileRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return file.Filemessage.internal_static_FileRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                file.Filemessage.FileRequest.class, file.Filemessage.FileRequest.Builder.class);
      }

      // Construct using file.Filemessage.FileRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        userID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        fileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return file.Filemessage.internal_static_FileRequest_descriptor;
      }

      public file.Filemessage.FileRequest getDefaultInstanceForType() {
        return file.Filemessage.FileRequest.getDefaultInstance();
      }

      public file.Filemessage.FileRequest build() {
        file.Filemessage.FileRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public file.Filemessage.FileRequest buildPartial() {
        file.Filemessage.FileRequest result = new file.Filemessage.FileRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.userID_ = userID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fileName_ = fileName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof file.Filemessage.FileRequest) {
          return mergeFrom((file.Filemessage.FileRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(file.Filemessage.FileRequest other) {
        if (other == file.Filemessage.FileRequest.getDefaultInstance()) return this;
        if (other.hasUserID()) {
          setUserID(other.getUserID());
        }
        if (other.hasFileName()) {
          bitField0_ |= 0x00000002;
          fileName_ = other.fileName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUserID()) {
          
          return false;
        }
        if (!hasFileName()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        file.Filemessage.FileRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (file.Filemessage.FileRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long userID_ ;
      /**
       * <code>required int64 userID = 1;</code>
       */
      public boolean hasUserID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 userID = 1;</code>
       */
      public long getUserID() {
        return userID_;
      }
      /**
       * <code>required int64 userID = 1;</code>
       */
      public Builder setUserID(long value) {
        bitField0_ |= 0x00000001;
        userID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 userID = 1;</code>
       */
      public Builder clearUserID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        userID_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object fileName_ = "";
      /**
       * <code>required string fileName = 2;</code>
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <code>required string fileName = 2;</code>
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        fileName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:FileRequest)
    }

    static {
      defaultInstance = new FileRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:FileRequest)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChunkHeader_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ChunkHeader_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Chunk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Chunk_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_FileRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileRequest_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021filemessage.proto\032\014common.proto\"z\n\013Chu" +
      "nkHeader\022\016\n\006userID\030\001 \002(\003\022\020\n\010fileName\030\002 \002" +
      "(\t\022\017\n\007chunkID\030\003 \002(\003\022\020\n\010fileSize\030\004 \001(\003\022\017\n" +
      "\007maxhops\030\005 \001(\005\022\025\n\003err\030\006 \001(\0132\010.Failure\"=\n" +
      "\005Chunk\022!\n\013chunkHeader\030\001 \002(\0132\014.ChunkHeade" +
      "r\022\021\n\tchunkData\030\002 \001(\014\"/\n\013FileRequest\022\016\n\006u" +
      "serID\030\001 \002(\003\022\020\n\010fileName\030\002 \002(\tB\010\n\004fileH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          pipe.common.Common.getDescriptor(),
        }, assigner);
    internal_static_ChunkHeader_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ChunkHeader_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_ChunkHeader_descriptor,
        new java.lang.String[] { "UserID", "FileName", "ChunkID", "FileSize", "Maxhops", "Err", });
    internal_static_Chunk_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Chunk_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Chunk_descriptor,
        new java.lang.String[] { "ChunkHeader", "ChunkData", });
    internal_static_FileRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_FileRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_FileRequest_descriptor,
        new java.lang.String[] { "UserID", "FileName", });
    pipe.common.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
